const { SlashCommandBuilder } = require("@discordjs/builders")
const { AudioFilters } = require("discord-player");
const { findConfigFile } = require("typescript");

module.exports = {
        
	data: new SlashCommandBuilder()
        .setName("filter")
        .setDescription("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–∏ –º—É–∑—ã–∫–∏, —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤: /filter list")
        .addStringOption((option) => option.setName("filter").setDescription("–§–∏–ª—å—Ç—Ä").setRequired(true)),
        // .addSubcommand(subcommand =>
        //         subcommand
        //                 .setName("list")
        //                 .setDescription("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        // )
     
	run: async ({ client, interaction }) => {
                if (!interaction.member.voice.channel) return interaction.editReply("–¢—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ! –ó–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
                const queue = client.player.getQueue(interaction.guildId);
                if (!queue || !queue.playing) return void interaction.followUp({ content: "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–π –º—É–∑—ã–∫–∏! üîá" });
                
                // if (interaction.options.getSubcommand() === "list") {
                //         return void interaction.followUp(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: ${Object.keys(AudioFilters).join(", ")}`);
                // }
                
                if (interaction.options.getString("filter")) {
                        const filters = [];
                        queue.getFiltersEnabled().map(x => filters.push(x));
                        queue.getFiltersDisabled().map(x => filters.push(x));

                        const filtersUpdated = {};
                        queue.getFiltersEnabled().map(x => filtersUpdated[x] = true);

                        const filter = filters.find((x) => x.toLowerCase() === interaction.options.getString("filter").toLowerCase());
                        if (!filter) return interaction.followUp({content: `‚ùå –¢–∞–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ—Ç –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! \n\n\n–°–µ–π—á–∞—Å –≤–∫–ª—é—á–µ–Ω—ã ${filtersUpdated}.\n: ''} \n\n üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ ${filters.map(x => `**${x}**`).join(', ')}.`});


                        filtersUpdated[filter] = queue.getFiltersEnabled().includes(filter) ? false : true;
                        await queue.setFilters(filtersUpdated);
                        return void interaction.followUp({ content: `–§–∏–ª—å—Ç—Ä ${filter} **${queue.getFiltersEnabled().includes(filter) ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}** ‚úÖ\n\n*–ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ –º—É–∑—ã–∫–∞, —Ç–µ–º –¥–æ–ª—å—à–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä!*` });
                }
	}
}
